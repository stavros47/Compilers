

//insert in ST anonymous function with 
{
//insert in ST global variable (nl). scope: 0, line: 1
nl = "\n";

//insert in ST global variable circle. scope: 0, line: 6
//insert in ST global variable pi. scope: 0, line: 6
circle = [ {"pi" : pi = 3.14159265359}, {"r" : 0}, {"x" : 0}, {"y" : 0}];

//insert in ST user function Area with 
//one formal argument (circle). scope: 0, line: 11
//insert in ST formal argument circle. scope: 1, line: 11
function Area (circle){
	return ::pi * circle.r * circle.r;
}

//insert in ST user function Perimeter with 
//one formal argument (circle). scope: 0, line: 18
//insert in ST formal argument circle. scope: 1, line: 18
function Perimeter(circle) {
	//pi refer to global pi. Nothing inster in ST
	return 2 * circle.pi * circle.r;
}

//insert in ST user function Perimeter with 
//no formal arguments. scope: 0, line: 25
function InitCircle() {
	//insert in ST local variable (defaultVal). scope: 1, line: 27
	circle.r = (local defaultVal = 5);
	circle.x = defaultVal;
	circle.y = defaultVal;
}

InitCircle(a);
print("pi: ", pi, "\n");
print("circle Area: ", Area(circle), nl);
print("circle Perimeter: ", Perimeter(circle), "\n\n");
print(circle);
	x = 1;	//variable x declared at scope 1
	{
		x = 2;	//referes to the previous x and is visible
	}
}
//two formal arguments (x, AnonymousOne). scope: 0, line: 5
//insert in ST formal argument x. scope: 1, line: 5
//insert in ST formal argument AnonymousOne. scope: 1, line: 5
function (x, AnonymousOne){
	
	//insert in ST anonymous function with 
	//one formal argument (AnonymousTwo). scope: 1, line: 10
	//insert in ST formal argument AnonymousTwo. scope: 2, line: 10
	function (AnonymousTwo){
		
		//insert in ST anonymous function with 
		//one formal argument (AnonymousThree). scope: 2, line: 15
		//insert in ST formal argument AnonymousThree. scope: 3, line: 15
		function (AnonymousThree){}
		
		//insert in ST anonymous function with 
		//one formal argument (AnonymousFour). scope: 2, line: 20
		//insert in ST formal argument AnonymousFour. scope: 3, line: 20
		function (AnonymousFour){}
	}
}

//insert in ST anonymous function with 
//two formal arguments (x, AnonymousFive). scope: 0, line: 28
//insert in ST formal argument x. scope: 1, line: 28
//insert in ST formal argument AnonymousFive. scope: 1, line: 28
function (x, AnonymousFive){}
a1 = a2 = a3 = a4 = nil;

global_var = 0;

{
        local a1 = 2;
}

function foo() {
        ::global_var = 1;
}

//here global_var must be 1;
print(global_var, "\n");

function foo1(){
        local global_var = 2;
        //here (local) global_var must be 2
        print(global_var, "\n");
}

//here global_var must be 1
print(global_var, "\n");


global_var = global_var + 1;
global_var = global_var - 1;
global_var = global_var * 2;
global_var = global_var / 2;
global_var = global_var % global_var;

global_var = true;

if (not global_var)
        global_var = true;

else
        global_var = false;

for (i = 0; (i < 10 and global_var) or (i > 20); ++i) {
        i++;

        if( i != 1)
                print();

        if ( i <= 2) {
                i=9;
                print();
                i--;
                --i;
        }

        if (i == 1)
                ;

        else if (i >= 4)
                ;
        else
                continue;
}

while (not global_var) {

        if ( local j = not global_var)
                break;
}



object = [];

object = [1, 2, "test"];

object = [{"a":2}, {"b":2}, {"c":3}];


object..f();
object[0] = 2;
object["test"] = 2;
object.test = 2;

object = (function (){});

function test (){
        function test1(){
                return test;
        }
        return test1;
}

test();
test()();
test()()();



function test1 (){
        return [
                {"a":1},
                {"x" : [ {"y":[]}] }
        ];
}

test1().a = 2;
test1().test1f();
test1().test1f(1, 2);
print().a = 2;

print(a1.a2.a3.a4, "\n");
{
x;
	{
	x;
		{
		x;
			{
			x;
			{
x;
        {
        x;
                {
                x;
                        {
                        x;{x;}
                        }
                }
        }
}

			}
		}
	}
}
